name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: 'ubuntu-18.04'

stages:
- stage: build
  displayName: BuildServices
  jobs:
  - job: buildApi
    steps:
    - task: Cake@2
      inputs:
        script: 'build.cake'
        target: 'PublishApi'
        verbosity: 'Verbose'
    - publish: deploy/api
      artifact: api-build
  - job: buildAdmin
    steps:
    - task: Cake@2
      inputs:
        script: 'build.cake'
        target: 'PublishAdmin'
        verbosity: 'Verbose'
    - publish: deploy/admin
      artifact: admin-build
  - job: buildExecutor
    steps:
    - task: Cake@2
      inputs:
        script: 'build.cake'
        target: 'PublishExecutor'
        verbosity: 'Verbose'
    - publish: deploy/executor
      artifact: executor-build
- stage: packInDocker
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: packApi
    steps:
      - download: current
        artifact: api-build
      - task: Docker@2
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/olympiad-api'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/api-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/api-build'
          tags: |
            $(Build.BuildId)
            latest
  - job: packAdmin
    steps:
      - download: current
        artifact: admin-build
      - task: Docker@2
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/olympiad-admin'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/admin-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/admin-build'
          tags: |
            $(Build.BuildId)
            latest
  - job: packExecutor
    steps:
      - download: current
        artifact: executor-build
      - task: Docker@2
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/olympiad-executor'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/executor-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/executor-build'
          tags: |
            $(Build.BuildId)
            latest
- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - deployment: DeployApi
      displayName: Deploy api
      pool:
        vmImage: 'Ubuntu-16.04'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/olympiad-api:$(Build.BuildId) olympiad_api'
                  readyTimeout: '20000'
    - deployment: DeployAdmin
      displayName: Deploy admin
      pool:
        vmImage: 'Ubuntu-16.04'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/olympiad-admin:$(Build.BuildId) olympiad_admin'
                  readyTimeout: '20000'
    - deployment: DeployExecutor
      displayName: Deploy executor
      pool:
        vmImage: 'Ubuntu-16.04'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/olympiad-executor:$(Build.BuildId) olympiad_executor'
                  readyTimeout: '20000'

