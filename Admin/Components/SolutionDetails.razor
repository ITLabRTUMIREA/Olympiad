@using Models.Solutions
@using Olympiad.Shared.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db


<h3>Solution details</h3>
@if (solution != null)
{
    <p>@solution.Id</p>
    <textarea rows="15" @bind="solution.Raw"></textarea>

    switch (showMode)
    {
        case "buildLogs":
            <h4>Build logs</h4>
            <label>
                <input type="radio" name="buildLogsMode" checked="@(buildLogsMode == "compact")" @onchange="@(() => buildLogsMode = "compact")" />compact
            </label>
            <label>
                <input type="radio" name="buildLogsMode" checked="@(buildLogsMode == "full")" @onchange="@(() => buildLogsMode = "full")" />full
            </label>
            @foreach (var buildLog in solution.SolutionBuildLogs)
            {
                <textarea rows="15">@(buildLogsMode == "full" ? buildLog.Log : buildLog.GetStreamFromLog())</textarea>
            }
            break;
        case "checks":
            <h4>Checks</h4>
            @foreach (var check in solution.SolutionChecks)
            {
                <div class="row">
                    <div class="col"><textarea rows="10">@check.ExampleIn</textarea></div>
                    <div class="col"><textarea rows="5">@check.ExampleOut</textarea><textarea rows="5">@check.ProgramOut</textarea></div>
                </div>
                <div class="row">

                    <div class="col">
                        @if (string.IsNullOrEmpty(check.ProgramErr))
                        {
                            <p>No error output</p>
                        }
                        else
                        {
                            <textarea rows="5">@check.ProgramErr</textarea>
                        }
                    </div>
                </div>
            }
            break;
        default:
            <p>Incorrect view mode</p>
            break;
    }
}
else
{
    if (string.IsNullOrEmpty(error))
    {
        <p>Loading...</p>
    }
    {
        <p>@error</p>
    }
}
@code {
    [Parameter]
    public Guid SolutionId { get; set; }

    private Solution solution;


    private string showMode = "buildLogs";

    private string buildLogsMode = "compact";

    private string error = "";
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadSolution();
    }

    private async Task LoadSolution(int tryNum = 0)
    {
        try
        {
            if (tryNum > 20)
            {
                error = "can't load solutionm refresh page";
                return;
            }
            error = "";
            await base.OnParametersSetAsync();
            solution = await db.Solutions
                .AsNoTracking()
                .Include(s => s.SolutionBuildLogs)
                .Include(s => s.SolutionChecks)
                .SingleOrDefaultAsync(s => s.Id == SolutionId);
            if (solution == null)
            {
                error = "solution not found";
                return;
            }
            if (solution.Status == SolutionStatus.CompileError)
                showMode = "buildLogs";
            else
                showMode = "checks";
        }
        catch
        {
            error = $"can't load solution, try {tryNum} wait 2 seconds";
            await Task.Delay(TimeSpan.FromSeconds(2));
            await LoadSolution(tryNum + 1);
        }
    }

}
