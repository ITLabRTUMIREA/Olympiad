<button @onclick="ToggleAll">toggle all</button>
@foreach (var lang in langs)
{
    <label>
        @lang.Key.title
        <input type="checkbox" checked="@langs[lang.Key]" @onchange="@(async (e) => await InputChanged(e, lang.Key))" />
        |
    </label>
}

@code {

    [Parameter]
    public string[] SelectedLangs { get; set; }

    [Parameter]
    public EventCallback<string[]> SelectedLangsChanged { get; set; }


    Dictionary<(string title, string value), bool> langs = new Dictionary<(string, string), bool>
{
        {    ("C", "c"), false },
        { ("C++", "cpp"), false },
        { ("C#", "csharp"), false },
        { ("Java", "java"), false  },
        { ("Pascal ABC", "pasabc"), false },
        { ("Python 3", "python"), false }
    };

    private Task InputChanged(ChangeEventArgs e, (string, string) key)
    {
        var value = (bool)e.Value;
        langs[key] = value;

        return UpdateValue();
    }

    private Task ToggleAll()
    {
        var firstPosition = langs.First().Value;
        foreach (var key in langs.Keys.ToArray())
        {
            langs[key] = !firstPosition;
        }
        return UpdateValue();
    }

    private Task UpdateValue()
    {
        SelectedLangs = langs.Where(p => p.Value).Select(p => p.Key.value).ToArray();
        return SelectedLangsChanged.InvokeAsync(SelectedLangs);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedLangs == null)
            return;

        foreach (var item in langs.Keys.ToArray())
        {
            if (SelectedLangs.Contains(item.value))
                langs[item] = true;
        }
    }
}
