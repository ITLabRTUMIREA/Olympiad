@using Olympiad.Shared.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions

@using Models.Solutions


@inject ApplicationDbContext db
<h3>Regex replace</h3>
<label>Predefined</label>
<select @onchange="OnPredefinedSelected">
    <option value="default">Select</option>
    @foreach (var define in predefined)
    {
        <option value="@define.name">@define.name</option>
    }
</select>
<br />

<label>
    Pattern
    <input @bind="findPattern" />
</label>
<LanguageSelector @bind-SelectedLangs="selectedLangs" />
<button class="btn btn-primary" @onclick="FindSolutions">Find</button>


<label>
    Replace to
    <input @bind="replaceTo" />
</label>
@if (targetSolutions.Count > 0)
{
    <button class="btn btn-primary" @onclick="@(() => Repair())">Preview @targetSolutions.Count solutions</button>
    <button class="btn btn-danger" @onclick="@(() => Repair(true))">Repair @targetSolutions.Count solutions</button>
}

<h4>Now for editing: @targetSolutions.Count solutions</h4>

<Olympiad.Admin.Components.Logs @ref="logs" />

@code {

    private (string name, string pattern, string replacement)[] predefined = new (string name, string pattern, string replacement)[]
    {
        ("Java class name", "^public class [^ ]+", "public class Main")
        };


    Olympiad.Admin.Components.Logs logs;

    string[] selectedLangs = new string[] { "cpp" };

    string findPattern = "";
    string replaceTo = "";

    Task Log(object obj) => logs.Log(obj);

    List<Solution> targetSolutions = new List<Solution>();

    private async Task OnPredefinedSelected(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "default")
        {
            return;
        }
        await Log($"Change current pattern :\"{findPattern}\" replaceTo: \"{replaceTo}\" to predefined");
        var target = predefined.Single(d => d.name == e.Value.ToString());
        findPattern = target.pattern;
        replaceTo = target.replacement;
    }

    async Task FindSolutions()
    {
        await Log("Start finding");
        targetSolutions.Clear();
        var count = await db.Solutions
            .Where(s => selectedLangs.Contains(s.Language))
            .CountAsync();
        await Log($"total: {count} solutions");
        int pageSize = 500;
        int i = 0;

        var regex = new Regex(findPattern);

        List<Guid> targets = new List<Guid>();
        while (i < count)
        {
            await Log($"start {i}, pagesize {pageSize}");
            var solutions = await db.Solutions
                .AsNoTracking()
                .Where(s => selectedLangs.Contains(s.Language))
                .Skip(i)
                .Take(pageSize)
                .Select(s => new { s.Id, s.Raw })
                .ToListAsync();
            await Log($"returned {solutions.Count}");

            foreach (var item in solutions)
            {
                if (item.Raw.Split('\n').Any(regex.IsMatch))
                    targets.Add(item.Id);
            }
            i += pageSize;
        }

        targetSolutions = await db
            .Solutions
            .Include(s => s.SolutionBuildLogs)
            .Where(s => targets.Contains(s.Id))
            .ToListAsync();
        await Log($"Findinded {targetSolutions.Count}");
    }

    async Task Repair(bool needUpdate = false)
    {
        var regex = new Regex(findPattern);

        int i = 1;
        foreach (var solution in targetSolutions)
        {
            await Log($"{i}/{targetSolutions.Count} : {solution.Id}");

            var newRaw = string.Join("\n", solution.Raw.Split("\n").Select(r => r.Replace("\r", "")).Select(r => regex.IsMatch(r) ? $"{regex.Replace(r, replaceTo)} // --- EDITED" : r));

            await Log("OLD\n" + solution.Raw);
            solution.Raw = RepairLogic.UpdateSource(solution.Raw, newRaw);
            await Log("NEW\n" + solution.Raw);
            solution.Status = SolutionStatus.InQueue;
            solution.SolutionBuildLogs.ForEach(l => db.SolutionBuildLogs.Remove(l));
            i++;
        }
        if (!needUpdate)
        {
            await Log("No update");
            return;
        }
        var saved = await db.SaveChangesAsync();
        await Log($"Done repairing, updated {saved} items");
    }

}
