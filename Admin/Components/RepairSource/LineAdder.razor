@using Olympiad.Shared.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions

@using Models.Solutions


@inject ApplicationDbContext db


<h3>Add line to programs, which contains some row in build logs</h3>

<label>
    Target string in build log
    <input @bind="targetStringInBuildLog" />
</label>

<label>
    Use compile error while search
    <input type="checkbox" @bind="useCompileErrorWhileSearch" />
</label>

<label>
    Line to add in file start
    <input @bind="lineToAddInFileStart" />
</label>

<button class="btn btn-primary" @onclick="FindSolutions">Find</button>
<button class="btn btn-primary" @onclick="Repair">Repair</button>
<Olympiad.Admin.Components.Logs @ref="logs" />

@code {
    Olympiad.Admin.Components.Logs logs;

    Task Log(object obj) => logs.Log(obj);

    string targetStringInBuildLog = "error: 'sin' was not declared in this scope";
    bool useCompileErrorWhileSearch = true;
    string lineToAddInFileStart = "#include <math.h>";
    List<Solution> targetSolutions = new List<Solution>();

    async Task FindSolutions()
    {
        await Log("Start finding");
        var query = db
            .Solutions
            .Include(s => s.SolutionBuildLogs)
            .Where(s => s.SolutionBuildLogs.Any(l => l.Log.Contains(targetStringInBuildLog)));
        if (useCompileErrorWhileSearch)
        {
            query = query.Where(s => s.Status == SolutionStatus.CompileError);
        }
        targetSolutions = await query.ToListAsync();
        await Log($"Findinded {targetSolutions.Count}");
    }

    async Task Repair()
    {
        var solutions = await db.Solutions.Where(s => s.Language == "cpp").Include(s => s.SolutionBuildLogs).ToListAsync();
        var dateStr = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss \"GMT\"zzz");
        int i = 0;
        foreach (var solution in solutions)
        {
            var raw = solution.Raw;
            var rawWithLine = Regex.IsMatch(raw, @"#include\s*<math.h>") ? raw : $"#include <math.h> // --- ADDED\n{raw}";
            var rawWithoutPch = string.Join('\n', rawWithLine.Split('\n').Select(l => l.Contains("#include \"pch.h\"") ? $"//{l.Replace("\r", "").Replace("\n", "")} -- REMOVED" : l));
            var commented = string.Join('\n', raw.Split("\n").Select(l => $"//{l}"));
            var newRaw = $"// --- EDITED FOR CHECKING {dateStr} ---\n{rawWithoutPch}\n// --- OLD SOURCE ---\n{commented}";
            solution.Raw = newRaw;
            solution.Status = SolutionStatus.InQueue;
            solution.SolutionBuildLogs.ForEach(l => db.SolutionBuildLogs.Remove(l));
            i++;
        }
        var saved = await db.SaveChangesAsync();
        await Log($"Done repairing, updated {saved} items");
    }
}
