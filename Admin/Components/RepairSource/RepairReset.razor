@using Olympiad.Shared.Models
@using Microsoft.EntityFrameworkCore

@using Models.Solutions


@inject ApplicationDbContext db


<h3>Undo repairing for solutions</h3>


<button class="btn btn-primary" @onclick="FindSolutions">Find</button>
<button class="btn btn-primary" @onclick="Repair">Repair</button>
<Olympiad.Admin.Components.Logs @ref="logs" />

@code {
    Olympiad.Admin.Components.Logs logs;

    Task Log(object obj) => logs.Log(obj);

    List<Solution> targetSolutions = new List<Solution>();


    async Task FindSolutions()
    {
        await Log("Start finding");
        targetSolutions = await db
            .Solutions
            .Include(s => s.SolutionBuildLogs)
            .Where(s => s.Raw.Contains("EDITED FOR CHECKING"))
            .ToListAsync();
        await Log($"Findinded {targetSolutions.Count}");
    }

    async Task Repair()
    {
        var dateStr = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss \"GMT\"zzz");
        int i = 1;
        foreach (var solution in targetSolutions)
        {
            await Log($"{i}/{targetSolutions.Count} : {solution.Id}");
            var newRaw = string.Join("\n", solution.Raw.Split("\n").SkipWhile(r => r != "// --- OLD SOURCE ---").Skip(1).Select(r => r.StartsWith("//") ? r.Substring(2) : r));
            solution.Raw = newRaw;
            solution.Status = SolutionStatus.InQueue;
            solution.SolutionBuildLogs.ForEach(l => db.SolutionBuildLogs.Remove(l));
            i++;
        }
        var saved = await db.SaveChangesAsync();
        await Log($"Done repairing, updated {saved} items");
    }
}
