@inherits OwningComponentBase<ApplicationDbContext>
@using BlazorStrap

@if (DataGroup == null)
{
    <p>loading @DataGroupId</p>
}
else
{
    <BSCard CardType="CardType.Card">
        <BSCard CardType="CardType.Header">
            <BSCollapseToggle IsLink="false">
                @DataGroup.Title (@DataGroup.Score)
                @if (DataGroup.IsPublic)
                {
                    <span class="oi oi-eye" aria-hidden="true"></span>
                }
            </BSCollapseToggle>
        </BSCard>
        <BSCollapse ShowEvent="HandleShow">
            <BSCard CardType="CardType.Body">
                <EditForm Model="DataGroup" class="form-inline">
                    <div class="input-group mb-2 mr-sm-2">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Title</div>
                        </div>
                        <InputText id="exercise-title" class="form-control" @bind-Value="DataGroup.Title" />
                    </div>
                    <div class="input-group mb-2 mr-sm-2">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Score</div>
                        </div>
                        <InputNumber id="exercise-title" class="form-control" @bind-Value="DataGroup.Score" />
                    </div>
                    <div class="form-check mb-2 mr-sm-2">
                        <label class="form-check-label">
                            <input class="form-check-input" type="checkbox" @bind="DataGroup.IsPublic">
                            Is public
                        </label>
                    </div>
                    @if (Service.Entry(DataGroup).State == EntityState.Modified)
                    {
                        <button type="submit" class="btn btn-success mb-2" @onclick="SaveChanges">Update</button>
                    }
                    <button class="btn btn-danger mb-2" @onclick="Delete">Delete group</button>
                    <label style="margin-left: 20px">
                        Add from JSON file
                        <InputFile OnChange="HandleFile" accept=".json" />
                    </label>
                </EditForm>

                @if (DataIds == null)
                {
                    <p>Loading</p>
                }
                else
                {
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>In</th>
                                <th>Out</th>
                                <th>Status</th>
                                <th>.</th>
                            </tr>
                        </thead>
                        <tbody>
                            <CascadingValue Name="EditExerciseDataGroup" Value="this">
                                @foreach (var id in DataIds)
                                {
                                    <EditExerciseData ExerciseDataId="id" />
                                }
                            </CascadingValue>
                        </tbody>
                    </table>
                    <button class="btn btn-success" @onclick="AddInOut">Add data item</button>
                }
            </BSCard>
        </BSCollapse>
    </BSCard>
}

@code {

    [Parameter]
    public Guid DataGroupId { get; set; }

    [CascadingParameter(Name = "EditExerciseDataGroups")]
    public EditExerciseDataGroups EditExerciseDataGroups { get; set; }
    [CascadingParameter(Name = "ExerciseEditLogs")]
    public Logs Logs { get; set; }
    private Models.Exercises.ExerciseDataGroup DataGroup { get; set; }

    private List<Guid> DataIds;
    private System.Threading.SemaphoreSlim dbOperation = new System.Threading.SemaphoreSlim(1, 1);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await dbOperation.WaitAsync();
        try
        {
            if (DataGroup == null || DataGroup.Id != DataGroupId)
            {
                DataGroup = await Service
                        .TestDataGroups
                        .Where(g => g.Id == DataGroupId)
                        .SingleOrDefaultAsync();
            }
        }
        finally
        {
            dbOperation.Release();
        }
    }

    private async Task SaveChanges()
    {
        await dbOperation.WaitAsync();
        try
        {
            await Service.SaveChangesAsync();
        }
        finally
        {
            dbOperation.Release();
        }
    }

    private async Task Delete()
    {
        await dbOperation.WaitAsync();
        try
        {
            Service.Remove(DataGroup);
            await Service.SaveChangesAsync();
            await EditExerciseDataGroups.LoadGroups();
        }
        finally
        {
            dbOperation.Release();
        }
    }

    private async Task HandleShow(BSCollapseEvent ev)
    {
        await UpdateList();
    }

    private async Task AddInOut()
    {
        await dbOperation.WaitAsync();
        try
        {
            var newData = new Models.Exercises.ExerciseData
            {
                ExerciseDataGroupId = DataGroupId,
                InData = "---",
                OutData = "---"
            };
            Service.TestData.Add(newData);
            await Service.SaveChangesAsync();
            DataIds.Add(newData.Id);
        }
        finally
        {
            dbOperation.Release();
        }
    }

    private async Task HandleFile(InputFileChangeEventArgs files)
    {
        List<List<string>> result = null;
        try
        {
            result = await System.Text.Json.JsonSerializer.DeserializeAsync<List<List<string>>>(files.File.OpenReadStream(1024000 * 20));
            await Logs.Log($"readed {result.Count} rows");
        }
        catch (Exception ex)
        {
            await Logs.Log("Can't read file");
            await Logs.Log(ex.Message);
            return;
        }
        if (result.Any(l => l.Count != 2))
        {
            await Logs.Log("every sub list must contains 2 elements, ends adding");
            return;
        }
        await dbOperation.WaitAsync();

        try
        {
            foreach (var inOut in result)
            {
                var newData = new Models.Exercises.ExerciseData
                {
                    ExerciseDataGroupId = DataGroupId,
                    InData = inOut[0],
                    OutData = inOut[1]
                };
                Service.TestData.Add(newData);
            }
            var saved = await Service.SaveChangesAsync();
            await Logs.Log($"saved {saved} rows");
        }
        catch (Exception ex)
        {
            await Logs.Log(ex.Message);
        }
        finally
        {
            dbOperation.Release();
        }
    }

    internal async Task UpdateList()
    {
        await dbOperation.WaitAsync();
        try
        {
            DataIds = await Service.TestData
                .Where(d => d.ExerciseDataGroupId == DataGroup.Id)
                .Select(d => d.Id)
                .ToListAsync();
        }
        finally
        {
            dbOperation.Release();
        }
        StateHasChanged();
    }

}
