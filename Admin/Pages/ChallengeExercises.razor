@page "/challenges/{ChallengeId:guid}/exercises"

@inherits OwningComponentBase<ApplicationDbContext>

@using Microsoft.EntityFrameworkCore

@inject NavigationManager navigationManager

<h3>Challenge exercises</h3>
<h4>@challengeTitle</h4>
<NavLink href=@($"challenges/{ChallengeId}/")>Back to @challengeTitle</NavLink>

@if (exercises == null)
{
    <p>Loading</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th>TestData</th>
                <th>Score</th>
                <th>.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exercise in exercises)
            {
                <tr>
                    <td>@exercise.Title</td>
                    <td>
                        @if (exercise.TestDataCount == 0)
                        {
                            <div class="alert alert-danger" role="alert">
                                @exercise.TestDataCount
                            </div>
                        }
                        else if (exercise.TestDataCount < 3)
                        {
                            <div class="alert alert-warning" role="alert">
                                @exercise.TestDataCount
                            </div>
                        }
                        else
                        {
                            @exercise.TestDataCount
                        }
                    </td>
                    <td>@exercise.Score</td>
                    <td><NavLink href=@($"challenges/{exercise.ChallengeId}/exercises/{exercise.Id}")>Edit</NavLink></td>
                </tr>
            }

        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="AddExercise">Add exercise</button>
}

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }

    private string challengeTitle = "Loading...";
    private List<ExerciseView> exercises;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        challengeTitle = await Service.Challenges.Where(c => c.Id == ChallengeId).Select(c => c.Name).SingleOrDefaultAsync();
        exercises = await Service.Exercises
            .OrderBy(e => e.ExerciseName)
            .Where(ex => ex.ChallengeId == ChallengeId)
            .Select(ex => new ExerciseView
            {
                Id = ex.ExerciseID,
                ChallengeId = ex.ChallengeId,
                Title = ex.ExerciseName,
                Score = ex.Score,
                TestDataCount = ex.ExerciseDatas.Count
            })
            .ToListAsync();
    }

    private async Task AddExercise()
    {
        var newExercise = new Models.Exercises.Exercise
        {
            ChallengeId = ChallengeId,
            ExerciseName = "NEW EXERCISE NAME",
            ExerciseTask = "NEW EXERCISE TASK",
        };
        Service.Exercises.Add(newExercise);
        await Service.SaveChangesAsync();
        navigationManager.NavigateTo($"challenges/{ChallengeId}/exercises/{newExercise.ExerciseID}");
    }

    private class ExerciseView
    {
        public Guid Id { get; set; }
        public Guid ChallengeId { get; set; }
        public string Title { get; set; }
        public int Score { get; set; }
        public int TestDataCount { get; set; }
    }
}
