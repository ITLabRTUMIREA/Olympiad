@page "/users/{UserId:guid}"

@inherits OwningComponentBase<Microsoft.AspNetCore.Identity.UserManager<User>>

@inject Olympiad.Admin.Services.UserPasswordGenerator userPasswordGenerator

@inject NavigationManager navigationManager


<h3>EditUser</h3>
<NavLink href="users">Back to users</NavLink>

@if (user == null)
{
    <p>Loading</p>
}
else
{
    <BlazorStrap.BSRow>
        <BlazorStrap.BSCol>
            <h4>Student id</h4>
            <p>@user.StudentID</p>
            <h4>Password</h4>
            @if (!string.IsNullOrEmpty(generatedPassword))
            {
                <p>@generatedPassword</p>
            }
            <button class="btn btn-warning" @onclick="RengeneratePassword">Regenerate password</button>
        </BlazorStrap.BSCol>
        <BlazorStrap.BSCol>
            <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
        </BlazorStrap.BSCol>
    </BlazorStrap.BSRow>
}

@code {

    [Parameter]
    public Guid UserId { get; set; }
    User user;
    private string generatedPassword;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnInitializedAsync();
        user = null;
        user = await Service.FindByIdAsync(UserId.ToString());
    }
    private async Task DeleteUser()
    {
        await Service.DeleteAsync(user);
        navigationManager.NavigateTo("users");
    }
    private async Task RengeneratePassword()
    {
        await Service.RemovePasswordAsync(user);
        var password = userPasswordGenerator.GeneratePassword();
        await Service.AddPasswordAsync(user, password);
        generatedPassword = password;
    }
}
