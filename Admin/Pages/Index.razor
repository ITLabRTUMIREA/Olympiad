@page "/"
@inherits OwningComponentBase<ApplicationDbContext>
@using Microsoft.EntityFrameworkCore
@using Olympiad.Shared.Models
@using System.Text.RegularExpressions

@using OpenQA.Selenium.Chrome
@using OpenQA.Selenium
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@using CsvHelper;

@inject Olympiad.Admin.Services.OlympiadWebAppHttpRequester webAppRequester;

<h2>Solutions count</h2>

<label>
    Auto update
    <input type="checkbox" @bind="autoUpdate" />
</label>
@if (!autoUpdate)
{
    <button class="btn btn-primary" @onclick="@Update">Update</button>
}
<p>Done in last 2 minutes: @doneInLast10Mins</p>
<p>Left: @Left() --- @(doneInLast10Mins == 0 ? "~" : TimeSpan.FromMinutes((Left() / (doneInLast10Mins == 0 ? 1 : doneInLast10Mins)) * 2).ToString())</p>
<button class="btn btn-primary" @onclick="@ForceResetQueue">Force reset queue</button>
<table>
    <thead>
        <tr>
            <th>Type</th>
            <th>Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var i in solutionCountRecords)
        {
            <tr>
                <td>@i.Status</td>
                <td>@i.Count</td>
            </tr>
        }
    </tbody>
</table>
<Olympiad.Admin.Components.Logs @ref="Logs" />

@code {

    List<SolutionCountRecord> solutionCountRecords = new List<SolutionCountRecord>();
    int doneInLast10Mins = 0;
    bool autoUpdate = false;
    Olympiad.Admin.Components.Logs Logs;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Update();
            UpdateCycle();
        }
    }

    private int Left()
    {
        return solutionCountRecords.Where(r => r.Status == "InProcessing").Select(r => r.Count).SingleOrDefault() + solutionCountRecords.Where(r => r.Status == "InQueue").Select(r => r.Count).SingleOrDefault();
    }

    private async Task UpdateCycle()
    {
        while (true)
        {
            await Task.Delay(TimeSpan.FromSeconds(1));
            if (autoUpdate)
                await Update();
        }
    }

    private async Task ForceResetQueue()
    {
        var updated = await webAppRequester.ForceResetQueue();
        await Logs.Log(updated);
        await Update();
    }

    private async Task Update()
    {
        await Logs.Log($"Updating");
        solutionCountRecords = await Service.Solutions.GroupBy(s => s.Status).Select(g => new SolutionCountRecord { Status = g.Key.ToString(), Count = g.Count() }).ToListAsync();
        var oldTime = DateTime.UtcNow - TimeSpan.FromMinutes(2);
        doneInLast10Mins = await Service.Solutions.Where(s => s.CheckedTime > oldTime).CountAsync();
        await Logs.Log($"Updated");
        StateHasChanged();
    }

    class SolutionCountRecord
    {
        public string Status { get; set; }
        public int Count { get; set; }
    }
}