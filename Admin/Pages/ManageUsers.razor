@page "/manageusers"

@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions

@inject IJSRuntime js
@inject ApplicationDbContext db
@inject Microsoft.AspNetCore.Identity.UserManager<User> userManager

<div class="row">
    <div class="col-12">
        <h2>Create user</h2>
        <p>Name - ФИО, Id- шифр, желательно делать похожим на настоящий, НО НЕ ИСПОЛЬЗОВАТЬ КИРИЛЛИЦУ. Группа - внимательно, большими буквами, из какой он группы</p>
        <br />
        <label>
            Name
            <input @bind="@newUserName" />
        </label>
        <label>
            Student Id
            <input @bind="@newUserId" />
        </label>
        <label>
            Group
            <input @bind="@newUserGroup" />
        </label>
        <button class="btn btn-primary" @onclick="@CreateUser">Create user and generate challenge</button>
    </div>
</div>

<Logs @ref="logs"></Logs>

@code {

    string fromId = "";
    string toId = "";

    private Logs logs;
    private Task Log(object o) => logs.Log(o);

    private string newUserName = "";
    private string newUserId = "";
    private string newUserGroup = "";

    private Random rand = new Random();

    private List<User> users = new List<User>();

    public async Task UpdateUsers()
    {
        users = await db.Users.AsNoTracking().ToListAsync();

    }

    public async Task CreateUser()
    {
        var password = string.Join("", Enumerable.Repeat(0, 10).Select(a => rand.Next(10)));

        var userName = newUserId;
        if (await db.Users.AnyAsync(u => u.UserName == userName))
        {
            return;
        }
        var olympUser = new User
        {
            Email = userName,
            UserName = userName,
            FirstName = newUserName,
            StudentID = userName
        };
        var result = await userManager.CreateAsync(olympUser, password);
        await Log($"create user success: {result.Succeeded} {string.Join(",", result.Errors.Select(e => e.Description))}");
        var result2 = await userManager.AddToRoleAsync(olympUser, "User");
        await Log($"add to role: {result2.Succeeded}");

        await js.DownloadFile("password.txt", System.Text.Encoding.UTF8.GetBytes($"{userName} {password}"));


        var newChallenge = new Models.Exercises.Challenge
        {
            CreationTime = DateTime.UtcNow,
            ChallengeAccessType = Olympiad.Shared.Models.ChallengeAccessType.Private,
            Name = $"{newUserGroup} - {newUserId}",
            StartTime = DateTime.UtcNow.AddMonths(12),
            EndTime = DateTime.UtcNow.AddMonths(13)
        };
        db.Challenges.Add(newChallenge);
        var saved = await db.SaveChangesAsync();
        await Log($"Challenge added, records saved: {saved}");

        newChallenge.UsersToChallenges = new List<Models.Links.UserToChallenge>
        {
                        new Models.Links.UserToChallenge
                        {
                            Challenge = newChallenge,
                            User = olympUser
                        }
                };

        saved = await db.SaveChangesAsync();
        await Log($"Challenge access granted, records saved: {saved}");

        var exercises1 = (await db.Exercises
           .Include(ex => ex.ExerciseDatas)
           .Where(e => e.Challenge.Name == "EXERCISES").ToListAsync())
           .GroupBy(e => System.Text.RegularExpressions.Regex.Match(e.ExerciseTask, @"^[^.]+").Value)
           .ToDictionary(e => e.Key, e => e.ToList());

        var exercises = exercises1.Values
            .Select(g => g[rand.Next(g.Count)])
            .ToList();

        var newExercises = exercises
        .Select(e => new Models.Exercises.Exercise
        {
            Challenge = newChallenge,
            ExerciseName = Regex.Match(e.ExerciseTask, @"^[^.]+.").Value,
            ExerciseTask = Regex.Replace(e.ExerciseTask, @"^[^.]+.", "").TrimStart(),
            Score = 1,
            ExerciseDatas = e.ExerciseDatas.Select(ed =>
                new Models.Exercises.ExerciseData
                {
                    InData = ed.InData,
                    OutData = ed.OutData,
                    IsPublic = ed.IsPublic
                }
            ).ToList()
        })
        .ToList();

        db.Exercises.AddRange(newExercises);

        saved = await db.SaveChangesAsync();
        await Log($"Exercise filling done, records saved: {saved}");
    }
}
