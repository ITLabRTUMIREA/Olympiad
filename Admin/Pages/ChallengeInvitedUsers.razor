@using Microsoft.Extensions.DependencyInjection
@using BlazorStrap
@inherits OwningComponentBase<Microsoft.Extensions.DependencyInjection.IServiceScopeFactory>

<h5>ChallengeInvitedUsers (@(acceptedUsers?.Count.ToString() ?? "~"))</h5>

@if (acceptedUsers == null)
{
    <p>Loading users</p>
}
else
{
    <BSTable IsBordered="true">
        <thead>
            <tr>
                <th>Student ID</th>
                <th>
                    <BSButton Color="Color.Danger" OnClick="() => RemoveAllUsersFromChallenge()">Remove all</BSButton>
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var user in acceptedUsers)
            {
                <tr>
                    <td>@user.StudentID</td>
                    <td>
                        <BSButton Color="Color.Danger" OnClick="() => RemoveUserFromChallenge(user)">Remove from challenge</BSButton>
                    </td>
                </tr>
            }

        </tbody>
    </BSTable>
    <h6>Invite by Student ID</h6>
    <EditForm Model="studentIdToInvite" OnValidSubmit="InviteByStudentId">
        <BSLabel>
            Student ID
            <BSInput InputType="InputType.Text" @bind-Value="studentIdToInvite" />
        </BSLabel>
        <BSButton ButtonType="ButtonType.Submit">Invite by Student ID</BSButton>
    </EditForm>

    <h6>Invite by claim</h6>
    <EditForm Model="ClaimsToFind">
        <table>
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Value</th>
                    <th>.</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ClaimsToFind)
                {
                    <tr>
                        <td>
                            <BSBasicInput InputType="InputType.Select" @bind-Value="item.Type">
                                @foreach (var claimType in AvailableClaims.Keys)
                                        {
                                    <option value="@claimType">@claimType</option>
                                        }
                            </BSBasicInput>
                        </td>
                        <td>
                            @if (AvailableClaims.ContainsKey(item.Type))
                            {
                                <BSBasicInput InputType="InputType.Select" @bind-Value="item.Value">
                                    @foreach (var claimValue in AvailableClaims[item.Type])
                                                {
                                        <option value="@claimValue">@claimValue</option>
                                                }
                                </BSBasicInput>
                            }
                            else
                            {
                                <p>Select type</p>
                            }
                        </td>
                        <td><button class="btn btn-danger" @onclick="() => ClaimsToFind.Remove(item)">Del</button></td>
                    </tr>
                }
                <tr>
                    <td colspan="2"><button class="btn btn-secondary" @onclick="() => ClaimsToFind.Add(new ClaimPair())">Add claim rule</button></td>
                </tr>
            </tbody>
        </table>
        @if (ClaimsToFind.Any() && ClaimsToFind.All(c => !string.IsNullOrEmpty(c.Type) && !string.IsNullOrEmpty(c.Value)))
        {
            <BSButton OnClick="InviteByClaim">Invite by claim</BSButton>
        }
    </EditForm>
    <Logs @ref="logs" />
}

@code {

    [Parameter]
    public Guid ChallengeId { get; set; }
    private List<User> acceptedUsers;
    private Logs logs;

    private string studentIdToInvite = "";
    private List<ClaimPair> ClaimsToFind = new List<ClaimPair>();
    private Dictionary<string, List<string>> AvailableClaims = new Dictionary<string, List<string>>();
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await UpdateAccepted();
    }

    private async Task UpdateAccepted()
    {
        if (logs != null)
        {
            await logs.Log($"Updating list");
        }
        await DoOnContext(async c =>
        {
            acceptedUsers = await c.Challenges
                .AsNoTracking()
                .Where(c => c.Id == ChallengeId)
                .SelectMany(c => c.UsersToChallenges)
                .Select(utc => utc.User)
                .ToListAsync();
            var allClaims = await c.UserClaims.Select(c => new { Type = c.ClaimType, Value = c.ClaimValue })
                .Distinct()
                .ToListAsync();
            AvailableClaims = allClaims.GroupBy(c => c.Type).ToDictionary(g => g.Key, g => g.Select(c => c.Value).ToList());
        });
    }

    private async Task InviteByStudentId()
    {
        await logs.Log($"Search user {studentIdToInvite }");
        await DoOnContext(async c =>
        {
            var users = await c.Users.Where(u => u.StudentID == studentIdToInvite).ToListAsync();
            if (users.Count != 1)
            {
                await logs.Log($"Found {users.Count} users, not 1, exit");
                return;
            }
            c.Add(new Models.Links.UserToChallenge
            {
                ChallengeId = ChallengeId,
                UserId = users.Single().Id
            });
            try
            {

                var saved = await c.SaveChangesAsync();
                await logs.Log($"Saved {saved} entities");
            }
            catch (Exception ex)
            {
                if (ex.InnerException != null)
                {
                    await logs.Log($"Can't save changes, {ex.InnerException.Message}");
                }
                else
                {
                    await logs.Log($"Can't save changes, {ex.Message}");
                }
            }
        });
        await UpdateAccepted();
    }

    private async Task InviteByClaim()
    {
        await logs.Log($"Search users by claims");
        await DoOnContext(async c =>
        {
            List<Guid> userIds = null;
            foreach (var targetClaim in ClaimsToFind)
            {
                var loadedIds = await c.UserClaims
                    .Where(uc => targetClaim.Type == uc.ClaimType && targetClaim.Value == uc.ClaimValue)
                    .Select(uc => uc.UserId)
                    .ToListAsync();
                if (userIds == null)
                {
                    userIds = loadedIds;
                }
                else
                {
                    userIds = userIds.Intersect(loadedIds).ToList();
                }
                await logs.Log($"Search by {targetClaim.Type}:{targetClaim.Value} found {loadedIds.Count} left {userIds.Count}");
            }
            var targetIds = userIds.Except(acceptedUsers.Select(u => u.Id)).ToList();
            await logs.Log($"after excluding existings {targetIds.Count}");
            foreach (var targetId in targetIds)
            {
                c.Add(new Models.Links.UserToChallenge
                {
                    ChallengeId = ChallengeId,
                    UserId = targetId
                });
            }
            try
            {
                var saved = await c.SaveChangesAsync();
                await logs.Log($"Saved {saved} entities");
            }
            catch (Exception ex)
            {
                if (ex.InnerException != null)
                {
                    await logs.Log($"Can't save changes, {ex.InnerException.Message}");
                }
                else
                {
                    await logs.Log($"Can't save changes, {ex.Message}");
                }
            }
        });
        await UpdateAccepted();
    }


    private async Task RemoveAllUsersFromChallenge()
    {

        await DoOnContext(async c =>
        {
            await logs.Log($"Removing all {acceptedUsers.Count} users");
            foreach (var user in acceptedUsers)
            {
                c.Remove(new Models.Links.UserToChallenge
                {
                    UserId = user.Id,
                    ChallengeId = ChallengeId
                });
            }
            var updated = await c.SaveChangesAsync();
            await logs.Log($"Updated: {updated}");
        });

        await UpdateAccepted();
    }

    private async Task RemoveUserFromChallenge(User user)
    {
        await DoOnContext(async c =>
        {
            await logs.Log($"Removing user {user.Email}");
            c.Remove(new Models.Links.UserToChallenge
            {
                UserId = user.Id,
                ChallengeId = ChallengeId
            });
            var updated = await c.SaveChangesAsync();
            await logs.Log($"Updated: {updated}");
        });

        await UpdateAccepted();
    }


    private Task DoOnContext(Func<ApplicationDbContext, Task>
    action)
    => DoOnType<ApplicationDbContext>
        (action);

    private async Task DoOnType<T>
        (Func<T, Task>
            action)
    {
        using var scope = Service.CreateScope();
        var type = scope.ServiceProvider.GetService<T>
            ();
        await action(type);
    }


    private class ClaimPair
    {
        public string Type { get; set; } = "";
        public string Value { get; set; } = "";

        public override string ToString()
        {
            return $"{Type}: {Value}";
        }
    }
}
