@page "/challenges/{ChallengeId:guid}/results"

@using Microsoft.EntityFrameworkCore
@using BlazorStrap

@inject ApplicationDbContext dbContext

<h3><NavLink href=@($"challenges")>Back to challenges</NavLink></h3>
<h3>ChallengeResults</h3>

<h4>@challengeName</h4>
@if (exercises == null)
{
    <p>Loading</p>
}
else
{
    <div class="row">
        <div class="col">
            <BSDropdown>
                <BSDropdownToggle Color="Color.Primary">Mode</BSDropdownToggle>
                <BSDropdownMenu>
                    <BSDropdownItem OnClick="() => showMode = ShowMode.Status">Status</BSDropdownItem>
                    <BSDropdownItem OnClick="() => showMode = ShowMode.ZeroOrOne">0 or 1</BSDropdownItem>
                    <BSDropdownItem OnClick="() => showMode = ShowMode.Score">Scores</BSDropdownItem>
                </BSDropdownMenu>
            </BSDropdown>
        </div>
        <div class="col">
            <BSDropdown>
                <BSDropdownToggle Color="Color.Primary">Columns</BSDropdownToggle>
                <BSDropdownMenu>
                    <BSDropdownItem OnClick="() => showMode = ShowMode.Status"><label>First name<input type="checkbox" @bind="showFirstName" /></label></BSDropdownItem>
                </BSDropdownMenu>
            </BSDropdown>
        </div>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Student Id</th>
                @if (showFirstName)
                {
                    <th>First name</th>
                }
                @foreach (var exercise in exercises)
                {
                    <th>@exercise.ExerciseName</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (userSolutions == null)
            {
                <tr>Loading users</tr>
            }
            else
            {

                @foreach (var userSolution in userSolutions)
                {
                    <tr>
                        <td><NavLink href=@($"challenges/{ChallengeId}/results/{userSolution.StudentId}")>@userSolution.StudentId</NavLink></td>
                        @if (showFirstName)
                        {
                            <td>@userSolution.User?.FirstName</td>
                        }
                        @foreach (var exercise in exercises)
                        {
                            if (userSolution.Results.ContainsKey(exercise.ExerciseID))
                            {
                                switch (showMode)
                                {
                                    case ShowMode.Status:
                                        <td>@userSolution.Results[exercise.ExerciseID]</td>
                                        break;
                                    case ShowMode.ZeroOrOne:
                                        <td>@(userSolution.Results[exercise.ExerciseID] == Olympiad.Shared.Models.SolutionStatus.Successful ? 1 : 0)</td>
                                        break;
                                    case ShowMode.Score:
                                        <td>Not support score view yet</td>
                                        break;
                                    default:
                                        <td>Incorrect mode</td>
                                        break;
                                }
                            }
                            else
                            {
                                <th>-</th>
                            }
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public Guid ChallengeId { get; set; }

    private string challengeName = "Loading challenge name";
    private List<Models.Exercises.Exercise> exercises;
    private List<UserSolutions> userSolutions;

    private ShowMode showMode = ShowMode.Status;
    private bool showFirstName = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        challengeName = await dbContext.Challenges.Where(c => c.Id == ChallengeId).Select(ch => ch.Name).SingleOrDefaultAsync();
        StateHasChanged();

        exercises = await dbContext.Exercises
            .OrderBy(e => e.ExerciseName)
            .Where(e => e.ChallengeId == ChallengeId).ToListAsync();
        StateHasChanged();

        var simpleData = await dbContext
                .Solutions
                .Include(s => s.User)
                .GroupBy(m => new { m.UserId, m.User.StudentID, m.ExerciseId })
                .Select(g => new
                {
                    UserId = g.Key.UserId,

                    StudentId = g.Key.StudentID,
                    ExerciseId = g.Key.ExerciseId,
                    Status = g.Max(s => s.Status)
                })
                .ToListAsync();
        userSolutions = simpleData
            .GroupBy(s => new { s.UserId, s.StudentId })
            .Select(g => new UserSolutions
            {
                UserId = g.Key.UserId,
                StudentId = g.Key.StudentId,
                Results = g.ToDictionary(g => g.ExerciseId, g => g.Status)
            })
            .OrderBy(g => g.StudentId)
            .ToList();
        var targetIds = userSolutions.Select(u => u.UserId).ToArray();
        var users = await dbContext.Users.Where(u => targetIds.Contains(u.Id)).ToListAsync();
        foreach (var usersolution in userSolutions)
        {
            usersolution.User = users.Single(u => u.Id == usersolution.UserId);
        }
    }

    class UserSolutions
    {
        public Guid UserId { get; set; }
        public string StudentId { get; set; }
        public User User { get; set; }
        public Dictionary<Guid, Olympiad.Shared.Models.SolutionStatus> Results { get; set; }
    }

    enum ShowMode
    {
        Status,
        ZeroOrOne,
        Score
    }

}
