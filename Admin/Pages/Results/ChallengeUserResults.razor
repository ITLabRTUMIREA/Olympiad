@page "/challenges/{ChallengeId:guid}/results/{UserStudentId}"
@using Microsoft.EntityFrameworkCore
@using BlazorStrap
@inject ApplicationDbContext dbContext
@inject IJSRuntime JS
@inject Services.UserSolutionsReportCreator reportsCreator

<h3><NavLink href=@($"challenges/{ChallengeId}/results")>Back to challenge results</NavLink></h3>
<h3>ChallengeUserResults</h3>

<h4>Challenge: @(challenge?.Name ?? "Loading...")</h4>
<h4>User student id: @(user?.StudentID ?? "Loading...")</h4>
@if (user != null && challenge != null)
{

    <button class="btn btn-primary" @onclick="async () =>  testReport = await reportsCreator.CreateMarkdownReport(user.Id, challenge.Id)">Create report</button>
    <div class="row">
        <div class="col">
            <p style="white-space: pre-line">@testReport</p>
        </div>
        <div class="col">
            @if (testReport?.Length > 1)
            {
                <button class="btn btn-primary" @onclick="@(() => JS.DownloadFile("report.md", System.Text.Encoding.UTF8.GetBytes(testReport)))">Download</button>
                <ExerciseTextMarkdown Markdown="@testReport"></ExerciseTextMarkdown>
            }
        </div>
    </div>
}
@if (exercises == null)
{
    <p>Loading exercises</p>
}
else
{
    <BSCollapseGroup>
        @foreach (var exercise in exercises)
        {
            <BSCollapseItem @key="exercise.ExerciseID">
                <BSCard CardType="CardType.Card">
                    <BSCard CardType="CardType.Header">
                        <BSCollapseToggle IsLink="true">@exercise.ExerciseName</BSCollapseToggle>
                    </BSCard>
                    <BSCollapse>
                        <BSCard CardType="CardType.Body">
                            @if (solutionsDict.TryGetValue(exercise.ExerciseID, out var solutions))
                            {
                                <ul class="list-group">
                                    @foreach (var solution in solutions)
                                    {
                                        <li class="list-group-item">
                                            <NavLink href=@($"challenges/{ChallengeId}/results/{UserStudentId}/{solution.Id}")>@solution.Status | @solution.Language | @solution.SendingTime</NavLink>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="@(async() => await LoadSolutionsForExercise(exercise.ExerciseID))">Load</button>
                            }
                        </BSCard>
                    </BSCollapse>
                </BSCard>
            </BSCollapseItem>
        }
    </BSCollapseGroup>

}

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public string UserStudentId { get; set; }

    private User user;
    private Models.Exercises.Challenge challenge;

    private List<Models.Exercises.Exercise> exercises;

    private System.Collections.Concurrent.ConcurrentDictionary<Guid, List<Models.Solutions.Solution>> solutionsDict
        = new System.Collections.Concurrent.ConcurrentDictionary<Guid, List<Models.Solutions.Solution>>();

    private string testReport;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        challenge = await dbContext.Challenges.SingleOrDefaultAsync(c => c.Id == ChallengeId);
        user = await dbContext.Users.SingleOrDefaultAsync(u => u.StudentID == UserStudentId);

        exercises = await dbContext.Exercises
            .Where(e => e.ChallengeId == ChallengeId)
            .Where(e => e.Solutions.Any(s => s.UserId == user.Id))
            .OrderBy(e => e.ExerciseName)
            .ToListAsync();
    }

    private async Task LoadSolutionsForExercise(Guid exerciseId)
    {
        var loadedList = await dbContext
            .Solutions
            .OrderByDescending(s => s.Status)
            .ThenByDescending(s => s.SendingTime)
            .Where(s => s.UserId == user.Id && s.ExerciseId == exerciseId).ToListAsync();
        solutionsDict.AddOrUpdate(exerciseId, id => loadedList, (id, old) => loadedList);
    }
}
