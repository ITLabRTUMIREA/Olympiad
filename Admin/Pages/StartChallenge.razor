@page "/startchallenge"

@using Models.Exercises
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext db
<h1>Select Challenge</h1>

<select @bind="selectOption">
    <option value="default">Select option</option>
    <option value="startwith">Start with</option>
</select>
@if (selectOption != "default")
{
    <div class="row">
        <div class="col-6">

            <label>
                Enter start of challenge name
                <input @bind="challengeStartName" />
            </label>
            <button class="btn btn-primary" @onclick="FindChallenges">Find challenges</button>

            <label>
                Start time:
                <input type="datetime-local" @bind="startTime" />
            </label>
            <button class="btn btn-primary" @onclick="() => startTime = DateTime.Now.AddMinutes(2)">In 2 minutes</button>
            <label>
                End time:
                <input type="datetime-local" @bind="endTime" />
            </label>
            <button class="btn btn-primary" @onclick="() => endTime = startTime.AddHours(1.5)">In an hour and a half after start</button>
            <br />
            <button class="btn btn-warning" @onclick="SetTime">Set time to @challenges.Count challenges</button>
            <Admin.Components.Logs @ref="logsComponent"></Admin.Components.Logs>
        </div>
        <div class="col-6">
            <h3>Finded(@challenges.Count):</h3>
            @foreach (var challenge in challenges)
            {
                <p>@challenge.Name</p>
            }
        </div>
    </div>

}



@code {
    Admin.Components.Logs logsComponent;
    private Task Log(object obj) => logsComponent.Log(obj);

    private DateTime startTime = DateTime.Now;
    private DateTime endTime = DateTime.UtcNow.AddDays(3);

    private string selectOption = "default";

    private string challengeStartName = "";

    private List<Challenge> challenges = new List<Challenge>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task SetTime()
    {
        foreach (var challenge in challenges)
        {
            challenge.StartTime = startTime.ToUniversalTime();
            challenge.EndTime = endTime.ToUniversalTime();
        }
        await Log($"Updating time for {challenges.Count} challenges");
        var updated = await db.SaveChangesAsync();
        await Log($"Updated {updated} records");
    }

    private async Task FindChallenges()
    {
        switch (selectOption)
        {
            case "startwith":
                await Log($"Start finding with start {challengeStartName}");
                challenges = await db.Challenges.Where(ch => ch.Name.StartsWith(challengeStartName)).ToListAsync();
                await Log($"Finded {challenges.Count} challenges");
                break;
            default:
                break;
        }
    }
}
