@using BlazorStrap
@foreach (var claimGroup in Claims ?? new Dictionary<string, HashSet<string>>())
{
    <BSCard>
        <BSCard CardType="CardType.Header">
            @claimGroup.Key
        </BSCard>
        <BSCard CardType="CardType.Body">
            <BSListGroup>
                @foreach (var claimValue in claimGroup.Value)
                {
                    <BSListGroupItem>@claimValue <BSButton Color="Color.Danger" OnClick="() => RemoveClaimFromGroup(claimGroup.Key, claimValue)">Remove</BSButton></BSListGroupItem>
                }
            </BSListGroup>
            <BSForm Model="currentClaimParams" OnValidSubmit="() => AddClaimToGroup(claimGroup.Key)">
                <BSFormGroup>
                    <BSInput Id="exampleInputEmail1" InputType="InputType.Text" PlaceHolder="Enter claim value" @bind-Value="currentClaimParams.CurrentClaimValue"></BSInput>
                    <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">Add claim value</BSButton>
                </BSFormGroup>
            </BSForm>
            <BSButton Color="Color.Danger" @onclick="() => RemoveClaimGroup(claimGroup.Key)">Remove claim group</BSButton>
        </BSCard>
    </BSCard>
}
<BSForm Model="currentClaimParams" OnValidSubmit="AddClaimsGroup">
    <BSFormGroup>
        <BSInput Id="exampleInputEmail1" InputType="InputType.Text" PlaceHolder="Enter claim group name" @bind-Value="currentClaimParams.CurrentClaimGroupName"></BSInput>
        <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">Add claim group</BSButton>
    </BSFormGroup>
</BSForm>


@code {

    private Dictionary<string, HashSet<string>> Claims { get; set; } = new Dictionary<string, HashSet<string>>();
    [Parameter]
    public IList<System.Security.Claims.Claim> ClaimsList { get; set; }
    [Parameter]
    public EventCallback<List<System.Security.Claims.Claim>> ClaimsListChanged { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (ClaimsList == null)
        {
            return;
        }
        Console.WriteLine($"Set with {ClaimsList.Count}");
        foreach (var claimGroup in ClaimsList.GroupBy(i => i.Type))
        {
            if (Claims.ContainsKey(claimGroup.Key))
            {
                Claims[claimGroup.Key].Clear();
                foreach (var claim in claimGroup)
                {
                    Claims[claimGroup.Key].Add(claim.Value);
                }
            }
            else
            {
                Claims.Add(claimGroup.Key, claimGroup.Select(c => c.Value).ToHashSet());
            }
        }
    }

    private async Task RemoveClaimFromGroup(string groupName, string claimValue)
    {
        if (Claims.ContainsKey(groupName))
        {
            Claims[groupName].Remove(claimValue);
        }
        await ClaimsListChanged.InvokeAsync(GenerateList());
    }

    private async Task AddClaimToGroup(string groupName)
    {
        if (Claims.ContainsKey(groupName))
        {
            Claims[groupName].Add(currentClaimParams.CurrentClaimValue);
        }
        await ClaimsListChanged.InvokeAsync(GenerateList());
        currentClaimParams.CurrentClaimValue = "";
    }

    private async Task RemoveClaimGroup(string groupName)
    {
        Claims.Remove(groupName);
        await ClaimsListChanged.InvokeAsync(GenerateList());
    }

    private async Task AddClaimsGroup()
    {
        Claims.Add(currentClaimParams.CurrentClaimGroupName, new HashSet<string>());
        await ClaimsListChanged.InvokeAsync(GenerateList());
        currentClaimParams.CurrentClaimGroupName = "";
    }

    private List<System.Security.Claims.Claim> GenerateList()
    {
        return Claims.SelectMany(p => p.Value.Select(c => new System.Security.Claims.Claim(p.Key, c))).ToList();
    }

    private ClaimParams currentClaimParams = new ClaimParams();
    private class ClaimParams
    {
        public string CurrentClaimGroupName { get; set; }
        public string CurrentClaimValue { get; set; }
    }
}
