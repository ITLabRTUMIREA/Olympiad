@page "/users/generate"
@using BlazorStrap
@using System.Text.RegularExpressions
@inherits OwningComponentBase<Microsoft.AspNetCore.Identity.UserManager<User>>

@inject Microsoft.Extensions.Options.IOptions<Olympiad.Shared.Models.Settings.GenerateSettings> generateSettings
@inject Olympiad.Admin.Services.UserPasswordGenerator userPasswordGenerator
@inject IJSRuntime JS


<h3>GenerateUsers</h3>
<NavLink href="users">Back to users</NavLink>

<p>CSV Table <strong>must</strong> contains <code>ID</code> >> StudentId and <code>Name</code> >> FirstName</p>
<p>CSV Table <strong>can</strong> contains <code>DefaultPassword</code> >> password</p>

<BSLabel For="exampleFormControlFile1">Users table</BSLabel>
<InputFile OnChange="HandleSelection" accept=".csv"/>
@if (!usersGenerateModel.IsValid().isValid)
{
    <BSAlert Color="Color.Danger">
        @usersGenerateModel.IsValid().errorMessage
    </BSAlert>
}
<table class="table table-bordered">
    <thead>
        <tr>
            @foreach (var columnName in usersGenerateModel.ColumnNames)
            {
                if (columnName == UsersGenerateModel.DefaultPassworkColumnName)
                {
                    <th class="alert alert-warning">@columnName</th>
                }
                else
                {
                    <th>@columnName</th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var userRecord in usersGenerateModel.UserGenerateRows)
        {
            <tr>
                <td>@userRecord.StudentID</td>
                <td>@userRecord.FirstName</td>
                @foreach (var claimPair in userRecord.Claims)
                {
                    <td>@claimPair.Value</td>
                }
            </tr>
        }
    </tbody>
</table>
<br />
@if (usersGenerateModel.IsValid().isValid)
{
    <BlazorStrap.BSButton Color="BlazorStrap.Color.Primary" @onclick="Generate">Generate</BlazorStrap.BSButton>
}


<Logs @ref="logs"></Logs>
@code {

    private UsersGenerateModel usersGenerateModel = new UsersGenerateModel();
    private Logs logs;
    async Task HandleSelection(InputFileChangeEventArgs files)
    {
        using (var reader = new System.IO.StreamReader(files.File.OpenReadStream()))
        using (var csv = new CsvHelper.CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture))
        {
            await csv.ReadAsync();
            csv.ReadHeader();
            usersGenerateModel = new UsersGenerateModel
            {
                ColumnNames = csv.Parser.Record
            };
            if (usersGenerateModel.IsValid().isValid)
            {
                while (await csv.ReadAsync())
                {
                    usersGenerateModel.AddUserRow(csv.Parser.Record, userPasswordGenerator.GeneratePassword);
                }
            }
        }
    }

    private async Task Generate()
    {
        List<UserGenerateRow> generates = new List<UserGenerateRow>();
        var defaultClaims = new List<System.Security.Claims.Claim> { new System.Security.Claims.Claim("reset_password", "need") };
        foreach (var (userToGenerate, i) in usersGenerateModel.UserGenerateRows.Select((u, i) => (u, i)))
        {
            User user = new User()
            {
                Email = $"{userToGenerate.StudentID}{generateSettings.Value.Domain}",
                UserName = userToGenerate.StudentID,
                EmailConfirmed = true,
                StudentID = userToGenerate.StudentID,
                FirstName = userToGenerate.FirstName
            };

            var result = await Service.CreateAsync(user, userToGenerate.Password);
            if (!result.Succeeded)
            {
                await logs.Log(string.Join('\n', result.Errors.Select(ir => ir.Description)));
                continue;
            }
            result = await Service.AddToRoleAsync(user, "User");
            result = await Service.AddClaimsAsync(user, userToGenerate.Claims.Concat(defaultClaims));
            generates.Add(userToGenerate);
            await logs.Log($"Generate user: {i + 1}/{usersGenerateModel.UserGenerateRows.Count} | {userToGenerate.StudentID}");
        }

        if (generates.Any())
        {
            await DownloadResults(generates);
            //await JS.DownloadFile("passwords.tsv", System.Text.Encoding.UTF8.GetBytes(string.Join('\n', generates.Select(u => $"{u.Login}\t{u.Password}"))));
        }
    }

    private async Task DownloadResults(List<UserGenerateRow> generated)
    {
        using var workBook = new ClosedXML.Excel.XLWorkbook();
        var workSheet = workBook.Worksheets.Add("Users");
        var currentRow = 1;
        var currentColumn = 1;
        workSheet.Cell(currentRow, currentColumn++).SetValue("ID (login)");
        workSheet.Cell(currentRow, currentColumn++).SetValue("Password");
        workSheet.Cell(currentRow, currentColumn++).SetValue("Name");
        foreach (var claim in generated.First().Claims)
        {
            workSheet.Cell(currentRow, currentColumn++).Value = claim.Type;
        }
        foreach (var row in generated)
        {
            currentRow++;
            currentColumn = 1;
            workSheet.Cell(currentRow, currentColumn++).SetValue(row.StudentID);
            workSheet.Cell(currentRow, currentColumn++).SetValue(row.Password);
            workSheet.Cell(currentRow, currentColumn++).SetValue(row.FirstName);
            foreach (var claim in row.Claims)
            {
                workSheet.Cell(currentRow, currentColumn++).SetValue(claim.Value);
            }
        }
        using (var stream = new System.IO.MemoryStream())
        {
            workBook.SaveAs(stream);
            var content = stream.ToArray();

            await JS.DownloadFile($"users.xlsx", content);
        }
    }

    private class UserGenerateRow
    {
        public string StudentID { get; set; }
        public string FirstName { get; set; }
        public string Password { get; set; }
        public List<System.Security.Claims.Claim> Claims { get; set; }
    }

    private class UsersGenerateModel
    {
        public string[] ColumnNames { get; init; } = new string[0];
        public const string DefaultPassworkColumnName = "DefaultPassword";
        public IReadOnlyCollection<UserGenerateRow> UserGenerateRows => userGenerateRows;

        private List<UserGenerateRow> userGenerateRows = new List<UserGenerateRow>();


        public void AddUserRow(string[] row, Func<string> createPasswordFunc)
        {
            if (row.Length != ColumnNames.Length)
            {
                throw new Exception("Incorrect row length");
            }
            var valid = IsValid();
            if (!valid.isValid)
            {
                throw new Exception(valid.errorMessage);
            }
            userGenerateRows.Add(new UserGenerateRow
            {
                StudentID = row[0],
                FirstName = row[1],
                Password = IsContainsPasswordColumn(out var passworcColumnNameIndex) ?
                    row[passworcColumnNameIndex] : createPasswordFunc(),
                Claims = row
                    .Skip(2)
                    .Select((r, i) => new System.Security.Claims.Claim(ColumnNames[i + 2], r))
                    .ToList()
            });
        }

        public bool IsContainsPasswordColumn(out int index)
        {
            index = Array.IndexOf(ColumnNames, DefaultPassworkColumnName);
            return index != -1;
        }

        public (bool isValid, string errorMessage) IsValid()
        {
            if (ColumnNames.Length < 2)
            {
                return (false, "You must provide two columns 'ID' and 'Name'");
            }
            if (ColumnNames[0] != "ID")
            {
                return (false, "First column must be called 'ID'");
            }
            if (ColumnNames[1] != "Name")
            {
                return (false, "Second column must be called 'Name'");
            }
            for (int i = 2; i < ColumnNames.Length; i++)
            {
                if (!Regex.IsMatch(ColumnNames[i], @"^([a-z]|[A-Z]|_)+$"))
                {
                    return (false, $"Error on {ColumnNames[i]}: all claims columns must contains only 'a-z', 'A-Z', '_'");
                }
            }
            return (true, "");
        }
    }
}
