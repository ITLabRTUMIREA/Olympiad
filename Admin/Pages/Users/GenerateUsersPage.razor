@page "/users/generate"
@inherits OwningComponentBase<Microsoft.AspNetCore.Identity.UserManager<User>>

@inject Microsoft.Extensions.Options.IOptions<Olympiad.Shared.Models.Settings.GenerateSettings> generateSettings
@inject Olympiad.Admin.Services.UserPasswordGenerator userPasswordGenerator
@inject IJSRuntime JS


<h3>GenerateUsers</h3>
<NavLink href="users">Back to users</NavLink>

<p>Insert list of StudentId</p>

<textarea @bind="rows"></textarea>
<ClaimsListComponent @bind-ClaimsList="Claims" />
<BlazorStrap.BSButton Color="BlazorStrap.Color.Primary" @onclick="Generate">Generate</BlazorStrap.BSButton>


@if (generatedUsers == null || !generatedUsers.Any())
{
    <p>No generated users</p>
}
else
{
    <ul>
        @foreach (var generatedUser in generatedUsers)
        {
            <li>@($"{generatedUser.Login} {generatedUser.Password}")</li>
        }
    </ul>
}
@code {
    string rows = "";
    List<PublicAPI.Responses.GenerateUsersRespponce> generatedUsers;

    List<System.Security.Claims.Claim> Claims = new List<System.Security.Claims.Claim>();

    private async Task Generate()
    {
        var userIds = rows.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        List<PublicAPI.Responses.GenerateUsersRespponce> generates = new List<PublicAPI.Responses.GenerateUsersRespponce>();

        var targetClaims = Claims;
        foreach (var studentId in userIds)
        {
            User user = new User()
            {
                Email = $"{studentId}{generateSettings.Value.Domain}",
                UserName = studentId,
                EmailConfirmed = true,
                StudentID = studentId
            };
            var password = userPasswordGenerator.GeneratePassword();
            var result = await Service.CreateAsync(user, password);
            result = await Service.AddToRoleAsync(user, "User");
            result = await Service.AddClaimsAsync(user, targetClaims);
            generates.Add(new PublicAPI.Responses.GenerateUsersRespponce { Login = user.UserName, Password = password });
        }

        generatedUsers = generates;
        if (generatedUsers.Any())
        {
            await JS.DownloadFile("passwords.tsv", System.Text.Encoding.UTF8.GetBytes(string.Join('\n', generatedUsers.Select(u => $"{u.Login}\t{u.Password}"))));
        }
    }
}
