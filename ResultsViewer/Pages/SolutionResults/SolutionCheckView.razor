@inherits LockSafe<Models.ApplicationDbContext>

@if (CheckGroups == null)
{
    <Spin></Spin>
}
else
{
    <Collapse Accordion>
        @foreach (var group in CheckGroups.OrderBy(g => g.IsSuccess))
        {
            <Panel Key="@group.Group.Id.ToString()">
                <HeaderTemplate>
                    <Text>
                        @group.Group.Title
                        |
                        @if (group.Group.IsPublic)
                        {
                            <Icon Type="eye" Theme="outline" />
                        }
                        else
                        {
                            <Icon Type="eye-invisible" Theme="outline" />
                        }
                        | score: @($"{(group.IsSuccess ? group.Score.Value.ToString() : "No Score")}")
                    </Text>
                </HeaderTemplate>
                <ChildContent>
                    @foreach (var check in group.Checks)
                    {
                        <Card Title="@($"{check.Status} | {check.CheckedTime}")">
                            <Row>
                                <AntDesign.Col Span="12">
                                    <label Level="4">
                                        Example IN
                                        <LongTextArea Value="@check.ExampleIn" />
                                    </label>
                                </AntDesign.Col>

                                <AntDesign.Col Span="12">
                                    <label>
                                        Program ERR
                                        <LongTextArea Value="@check.ProgramErr" />
                                    </label>
                                </AntDesign.Col>
                            </Row>
                            <br />
                            <Row>
                                <RadioGroup @bind-Value="@programOutMode">
                                    <Radio RadioButton Value="@("diff")">Difference</Radio>
                                    <Radio RadioButton Value="@("separate")">Separate</Radio>
                                </RadioGroup>
                            </Row>
                            <Row>

                                <AntDesign.Col Span="12"><label>Example OUT</label></AntDesign.Col>
                                <AntDesign.Col Span="12"><label>Program OUT</label></AntDesign.Col>
                            </Row>
                            <Row>
                                @if (programOutMode == "separate")
                                {
                                    <AntDesign.Col Span="12">
                                        <LongTextArea Value="@check.ExampleOut"></LongTextArea>
                                    </AntDesign.Col>
                                    <AntDesign.Col Span="12">
                                        <LongTextArea Value="@check.ProgramOut"></LongTextArea>
                                    </AntDesign.Col>
                                }
                                @if (programOutMode == "diff" && alreadyRendered) // TextDiff uses JS and can't be pre rendered
                                {
                                    <AntDesign.Col Style="width: 100%">
                                        <BlazorTextDiff.TextDiff OldText="@check.ExampleOut"
                                                                 NewText="@check.ProgramOut"
                                                                 CollapseContent="false"
                                                                 ShowWhiteSpace="true">
                                            <Header></Header>
                                        </BlazorTextDiff.TextDiff>
                                    </AntDesign.Col>
                                }
                            </Row>
                        </Card>
                    }
                </ChildContent>
            </Panel>
        }
    </Collapse>
}

@code {
    [Parameter]
    public Guid SolutionId { get; set; }

    private List<TestDataGroupChecks> CheckGroups { get; set; }

    private string programOutMode = "diff";
    private bool alreadyRendered;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await DoSafe(async c =>
        {
            var allChecks = await c
       .SolutionChecks
       .Include(s => s.TestData)
       .ThenInclude(td => td.ExerciseDataGroup)
       .Where(s => s.SolutionId == SolutionId)
       .ToListAsync();
            CheckGroups = allChecks
       .GroupBy(ch => ch.TestData.ExerciseDataGroup)
       .Select(g => new TestDataGroupChecks
       {
           Group = g.Key,
           Checks = g.OrderByDescending(s => s.Status).ToList()
       })
       .ToList();
        });
    }

    private class TestDataGroupChecks
    {
        public Models.Exercises.ExerciseDataGroup Group { get; set; }
        public List<Models.Checking.SolutionCheck> Checks { get; set; }
        public bool IsSuccess => Checks.All(c => c.Status == Olympiad.Shared.Models.SolutionStatus.Successful);
        public int? Score => IsSuccess ? Group.Score : (int?)null;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // TextDiff uses JS and can't be pre rendered
            Task.Run(async () =>
            {
                await Task.Delay(200);
                alreadyRendered = true;
            });
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}
