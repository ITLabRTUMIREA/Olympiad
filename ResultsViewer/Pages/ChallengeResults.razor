@page "/challenge/{ChallengeId:guid}"

@inherits LockSafe<Olympiad.Services.ResultsService>
<PageHeader Title="@(challengeResults?.ChallengeName ?? "Loading...")">
</PageHeader>

<Search Placeholder="Student id or name" Size="@InputSize.Small" @bind-Value="@searchPattern" OnPressEnter="OnSearch" />
<br />
@if (challengeResults != null)
{
    <Table DataSource="bySearch"
           PageSize="10"
           ScrollX="@tableScrollX">

        <Column Title="Student ID" Field="context.StudentId" Fixed="left" Width="100px">
            <NavLink href="@($"challenge/{ChallengeId}/user/{context.UserId}")">@context.StudentId</NavLink>
        </Column>
        @foreach (var exercise in challengeResults.Exercises)
        {
            <Column TData="string">
                <TitleTemplate>
                    <p Style="text-align: center">@exercise.ExerciseName</p>
                </TitleTemplate>
                <ChildContent>
                    @if (context.Scores.ContainsKey(exercise.ExerciseID))
                    {
                        <p style="text-align:center;">@context.Scores[exercise.ExerciseID]</p>
                    }
                </ChildContent>
            </Column>
        }
        <Column Title="Name" Field="context.User?.FirstName" Width="120px" Fixed="right" />
        <Column Title="Score" Field="context.Scores?.Sum(s => s.Value)" Width="70px" Fixed="right"></Column>
    </Table>

}
@code {
    [Parameter]
    public Guid ChallengeId { get; set; }

    private Olympiad.Services.ResultsService.ChallengeResults challengeResults;
    private List<Olympiad.Services.ResultsService.UserSolution> bySearch;


    private string tableScrollX;
    private string searchPattern;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await DoSafe(async s =>
        {
            challengeResults = await s.GetChallengeResults(ChallengeId);
            bySearch = challengeResults.UserSolutions;
        });
    }

    private void OnSearch()
    {
        bySearch = challengeResults.UserSolutions
                  .Where(us => 
                    us.StudentId.Contains(searchPattern ?? "", StringComparison.OrdinalIgnoreCase) || 
                    us.User.FirstName.Contains(searchPattern ?? "",StringComparison.OrdinalIgnoreCase))
                  .ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (challengeResults?.Exercises?.Count != null)
        {
            var newValue = $"{challengeResults.Exercises.Count * 100}px";
            if (newValue != tableScrollX)
            {
                tableScrollX = newValue;
                StateHasChanged();
            }
        }
    }

}
