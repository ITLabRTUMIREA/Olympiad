@page "/challenge/{ChallengeId:guid}"

@inherits LockSafe<Olympiad.Services.ResultsService>
<PageHeader Title="@(challengeResults?.ChallengeName ?? "Loading...")">
</PageHeader>
@if (challengeResults != null)
{
    <Table DataSource="challengeResults.UserSolutions"
           PageSize="challengeResults.UserSolutions.Count"
           ScrollX="@tableScrollX"
           ScrollY="70vh">


        <Column Title="Student ID" Field="context.StudentId" Fixed="left" Width="100px">
            <NavLink href="@($"challenge/{ChallengeId}/user/{context.UserId}")">@context.StudentId</NavLink>
        </Column>
        @foreach (var exercise in challengeResults.Exercises)
        {
            <Column TData="string">
                <TitleTemplate>
                    <p Style="text-align: center">@exercise.ExerciseName</p>
                </TitleTemplate>
                <ChildContent>
                    @if (context.Scores.ContainsKey(exercise.ExerciseID))
                    {
                        <p style="text-align:center;">@context.Scores[exercise.ExerciseID]</p>
                    }
                </ChildContent>
            </Column>
        }
        <Column Title="Name" Field="context.User?.FirstName" Width="120px" Fixed="right" />
        <Column Title="Score" Field="context.Scores?.Sum(s => s.Value)" Width="70px" Fixed="right"></Column>
    </Table>

}
@code {
    [Parameter]
    public Guid ChallengeId { get; set; }

    private Olympiad.Services.ResultsService.ChallengeResults challengeResults;

    private string tableScrollX;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await DoSafe(async s =>
        {
            challengeResults = await s.GetChallengeResults(ChallengeId);
            challengeResults.UserSolutions = Enumerable.Repeat(challengeResults.UserSolutions, 100).SelectMany(r => r).ToList();
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (challengeResults?.UserSolutions?.Count != null)
        {
            tableScrollX = $"{challengeResults.UserSolutions.Count * 100}px";
        }
    }

}
